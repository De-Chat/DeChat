/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../common';
import type { Send, SendInterface } from '../Send';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'erc1155ContractAddress',
        type: 'address',
      },
    ],
    name: 'SendErc1155',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'erc20ContractAddress',
        type: 'address',
      },
    ],
    name: 'SendErc20',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'erc721ContractAddress',
        type: 'address',
      },
    ],
    name: 'SendErc721',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'SendEth',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC1155',
        name: 'erc1155',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'sendErc1155',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC20',
        name: 'erc20',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'sendErc20',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC721',
        name: 'erc721',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'sendErc721',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
    ],
    name: 'sendEth',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610ab2806100206000396000f3fe60806040526004361061003f5760003560e01c8063589365471461004457806376a54c6014610081578063b2076b2e146100b1578063d1aa4588146100ee575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610634565b61012b565b60405161007891906106e9565b60405180910390f35b61009b60048036038101906100969190610704565b610219565b6040516100a891906106e9565b60405180910390f35b3480156100bd57600080fd5b506100d860048036038101906100d3919061076f565b6102ff565b6040516100e591906106e9565b60405180910390f35b3480156100fa57600080fd5b5061011560048036038101906101109190610800565b6103e2565b60405161012291906106e9565b60405180910390f35b60008673ffffffffffffffffffffffffffffffffffffffff1663f242432a3388888888886040518763ffffffff1660e01b8152600401610170969594939291906108cf565b600060405180830381600087803b15801561018a57600080fd5b505af115801561019e573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fea7f1dae898e7132ca67b751d9750d01baf863e4b33e6c43e54352d17c16e24d87878b6040516102039392919061092b565b60405180910390a3600190509695505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163460405161024090610993565b60006040518083038185875af1925050503d806000811461027d576040519150601f19603f3d011682016040523d82523d6000602084013e610282565b606091505b505090508061029057600080fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5cd5a8cab7b48295c005c6808ff34169eda9109e829f03041bd9eb07e9138532346040516102ed91906109a8565b60405180910390a36001915050919050565b60008373ffffffffffffffffffffffffffffffffffffffff166342842e0e3385856040518463ffffffff1660e01b815260040161033e939291906109c3565b600060405180830381600087803b15801561035857600080fd5b505af115801561036c573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f02e83e37c72f793771a226a503f03629f7e0db67b7c5e8727bb143546cf8d88984876040516103cf9291906109fa565b60405180910390a3600190509392505050565b6000808473ffffffffffffffffffffffffffffffffffffffff166323b872dd3386866040518463ffffffff1660e01b8152600401610422939291906109c3565b602060405180830381600087803b15801561043c57600080fd5b505af1158015610450573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104749190610a4f565b90508061048057600080fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f179a1b9d08ef07e50733669b25df91bbc771d0660754daaf8a0b3d6008f6881385886040516104df9291906109fa565b60405180910390a360019150509392505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610528826104fd565b9050919050565b600061053a8261051d565b9050919050565b61054a8161052f565b811461055557600080fd5b50565b60008135905061056781610541565b92915050565b6105768161051d565b811461058157600080fd5b50565b6000813590506105938161056d565b92915050565b6000819050919050565b6105ac81610599565b81146105b757600080fd5b50565b6000813590506105c9816105a3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126105f4576105f36105cf565b5b8235905067ffffffffffffffff811115610611576106106105d4565b5b60208301915083600182028301111561062d5761062c6105d9565b5b9250929050565b60008060008060008060a08789031215610651576106506104f3565b5b600061065f89828a01610558565b965050602061067089828a01610584565b955050604061068189828a016105ba565b945050606061069289828a016105ba565b935050608087013567ffffffffffffffff8111156106b3576106b26104f8565b5b6106bf89828a016105de565b92509250509295509295509295565b60008115159050919050565b6106e3816106ce565b82525050565b60006020820190506106fe60008301846106da565b92915050565b60006020828403121561071a576107196104f3565b5b600061072884828501610584565b91505092915050565b600061073c8261051d565b9050919050565b61074c81610731565b811461075757600080fd5b50565b60008135905061076981610743565b92915050565b600080600060608486031215610788576107876104f3565b5b60006107968682870161075a565b93505060206107a786828701610584565b92505060406107b8868287016105ba565b9150509250925092565b60006107cd8261051d565b9050919050565b6107dd816107c2565b81146107e857600080fd5b50565b6000813590506107fa816107d4565b92915050565b600080600060608486031215610819576108186104f3565b5b6000610827868287016107eb565b935050602061083886828701610584565b9250506040610849868287016105ba565b9150509250925092565b61085c8161051d565b82525050565b61086b81610599565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006108ae8385610871565b93506108bb838584610882565b6108c483610891565b840190509392505050565b600060a0820190506108e46000830189610853565b6108f16020830188610853565b6108fe6040830187610862565b61090b6060830186610862565b818103608083015261091e8184866108a2565b9050979650505050505050565b60006060820190506109406000830186610862565b61094d6020830185610862565b61095a6040830184610853565b949350505050565b600081905092915050565b50565b600061097d600083610962565b91506109888261096d565b600082019050919050565b600061099e82610970565b9150819050919050565b60006020820190506109bd6000830184610862565b92915050565b60006060820190506109d86000830186610853565b6109e56020830185610853565b6109f26040830184610862565b949350505050565b6000604082019050610a0f6000830185610862565b610a1c6020830184610853565b9392505050565b610a2c816106ce565b8114610a3757600080fd5b50565b600081519050610a4981610a23565b92915050565b600060208284031215610a6557610a646104f3565b5b6000610a7384828501610a3a565b9150509291505056fea26469706673582212209874eec8ec0a245d4c1d1087c44b1128b37985c9d0f8270ee4ee9d1592310b5264736f6c63430008090033';

type SendConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SendConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Send__factory extends ContractFactory {
  constructor(...args: SendConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Send> {
    return super.deploy(overrides || {}) as Promise<Send>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Send {
    return super.attach(address) as Send;
  }
  override connect(signer: Signer): Send__factory {
    return super.connect(signer) as Send__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SendInterface {
    return new utils.Interface(_abi) as SendInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Send {
    return new Contract(address, _abi, signerOrProvider) as Send;
  }
}
